//
// Copyright (c) 2017 Stephen Ibanez
// All rights reserved.
//
// This software was developed by Stanford University and the University of Cambridge Computer Laboratory 
// under National Science Foundation under Grant No. CNS-0855268,
// the University of Cambridge Computer Laboratory under EPSRC INTERNET Project EP/H040536/1 and
// by the University of Cambridge Computer Laboratory under DARPA/AFRL contract FA8750-11-C-0249 ("MRC2"), 
// as part of the DARPA MRC research programme.
//
// @NETFPGA_LICENSE_HEADER_START@
//
// Licensed to NetFPGA C.I.C. (NetFPGA) under one or more contributor
// license agreements.  See the NOTICE file distributed with this work for
// additional information regarding copyright ownership.  NetFPGA licenses this
// file to you under the NetFPGA Hardware-Software License, Version 1.0 (the
// "License"); you may not use this file except in compliance with the
// License.  You may obtain a copy of the License at:
//
//   http://www.netfpga-cic.org
//
// Unless required by applicable law or agreed to in writing, Work distributed
// under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations under the License.
//
// @NETFPGA_LICENSE_HEADER_END@
//

// project demo rtl test,
// functions L2 switching, table_rank_calc_mode, strict priority, and wrr rank calc,


// ====================================================
// table rule for L1 swithing
// table name: table_l1_switch
// key       : sume_metadata.src_port
// action    : l2_forward
// action param: 8bit vector for output port


// the following 4 rule is used to forwarding for sfp port

// port 0 -> port 2
table_cam_add_entry table_l1_switch l2_forward 0b00000001 => 0b00010000
// port 1 -> port 2
table_cam_add_entry table_l1_switch l2_forward 0b00000100 => 0b00010000
// port 3 -> port 0
table_cam_add_entry table_l1_switch l2_forward 0b01000000 => 0b00000001
 


// ====================================================
// table rule for strict priority, 
// table name: table_strict_priority
// key       : ethernet.srcAddr
// action    : set_strict_rank
// action param: bit<32> pifo_info

// rank for 1

table_cam_add_entry table_strict_priority set_strict_rank 0x013333333301 => 0x80001000
table_cam_add_entry table_strict_priority set_strict_rank 0x014444444401 => 0x80001000  

// ====================================================
// table rule for wrr class lookup 
// table name: table_rc_class_lookup
// key       : ethernet.srcAddr
// action    : set_wrr_class
// action param: bit<5> class

table_cam_add_entry table_rc_class_lookup set_rc_class 0x013333333301 => 1
table_cam_add_entry table_rc_class_lookup set_rc_class 0x014444444401 => 2


// ====================================================
// table rule for wrr weight lookup 
// table name: table_rc_weight_lookup
// key       : ethernet.srcAddr
// action    : set_rc_weight
// action param:bit<16> class_weight

table_cam_add_entry table_rc_weight_lookup set_rc_weight 0x013333333301 => 10
table_cam_add_entry table_rc_weight_lookup set_rc_weight 0x014444444401 => 2

// ====================================================
// table rule for rank calc look up, 
// table name: table_rank_calc_mode
// key       : sumemeta.dst_port
// action    : set_calc_mode
// action param: bit<8> calc_mode, each bit stands for pq, wrr, drr, wfq,


table_cam_add_entry table_rank_calc_mode set_calc_mode 0b00010000 => 0b00000010
table_cam_add_entry table_rank_calc_mode set_calc_mode 0b00000001 => 0b00000001